buildscript {
    repositories {
        maven { url 'https://mirrors.huaweicloud.com/repository/maven/' }
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'idea'
    id 'maven-publish'
    id 'distribution'
    id 'com.palantir.docker' version '0.31.0'
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

group = 'cn.linshenkx'
version = '1.0.1'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://mirrors.huaweicloud.com/repository/maven/' }

}

ext {
    set('springCloudVersion', "2021.0.0")
    flexmarkVersion = "0.62.2"
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'cn.hutool:hutool-all:5.7.18'
    implementation 'com.alibaba:fastjson:1.2.79'

    implementation 'jakarta.validation:jakarta.validation-api:3.0.0'
    implementation 'org.hibernate:hibernate-validator:7.0.1.Final'
    implementation 'org.glassfish:jakarta.el:4.0.2'

    implementation 'com.github.xiaoymin:knife4j-spring-boot-starter:2.0.8'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'p6spy:p6spy:3.9.1'

    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r'
    implementation 'org.eclipse.jgit:org.eclipse.jgit.ssh.apache:5.13.0.202109080827-r'
    implementation 'com.sshtools:maverick-synergy:3.0.4-FINAL'
    implementation 'org.mapdb:mapdb:3.0.8'

    implementation 'org.springframework.data:spring-data-commons:2.5.4'

    implementation "com.vladsch.flexmark:flexmark:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-attributes:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-autolink:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-emoji:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-escaped-character:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-gfm-tasklist:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-ins:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-media-tags:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-tables:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-toc:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-superscript:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-yaml-front-matter:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-gitlab:$flexmarkVersion"

    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

bootJar {
}
task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    name "linshen/halo-sync-server"
    tag "version","linshen/halo-sync-server:${project.version}"
    tag "latest","linshen/halo-sync-server:latest"
    dockerfile file('Dockerfile')
    copySpec.from(tasks.unpack.outputs).into("dependency")
    //构建前是否拉取最新基础镜像
    pull true
    //是否从头构建
    noCache true
}

task buildLatestAndVersionImage() {
    dependsOn dockerTag
}